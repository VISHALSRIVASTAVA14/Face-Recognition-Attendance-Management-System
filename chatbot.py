from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from PIL import Image,ImageTk
import random

thanks=["ok","thank you","grateful","got it","understood","thanks"]
thanks_bot=["I am glad to hear this!!! :)","Your welcome!!!"]

greeting=["hello","hey","hi","good day","greetings","what's up?","how is it going?"]
greeting_bot=["Hello!","Hey!","Hey!!!What can i do for you?","Hey,Nice to see you!!!"]

goodbye=["goodbye","see you later","i am leaving","have a good day","bye","see ya"]
goodbye_bot=["Goodbye!","Bye byee,talk to you later!","It was a nice time with you!!!","See you soon :)"]

age=["what is your age?","how old are you?","age?","would you mind telling me your age?","how old?","your age"]
age_bot=["I was created in 2024 so u can estimate my age","I am 1 year old but my owner is 20 years old"]

name=["what is your name?","what can i call you?","who are you?","can you tell me your name?","would you mind telling your name?"]
name_bot=["I am Jarvis","You can call me Jarvis","I am Jarvis created by Mr.Vishal Srivastava in july,2024"]

description=["describe face recognition attendance management system","tell me something about the project?","tell me something about face recognition attendance management system?","how face recognition attendance management system works?","what is the aim of face recognition attendance management system?"]
description_bot=["Face Recognition Attendance Management System is created for storing the information of the students in a database and taking their photo samples.This sample is used for detecting the student and marking their attendance in a csv file.It has used two algorithms i.e. haar cascade algorithm for face detection and LBPH(Local Binary Pattern Histogram) for face recognition.It has 8 components i.e. STUDENT DETAILS,FACE RECOGNITION,ATTENDANCE,CHATBOT,TRAIN DATA,GALLERY,DEVELOPER and EXIT Buttons"]

use=["what are the steps to use this project?","how to use it?","how to store student details?","how to mark the attendance?","step by step working of face recognition attendance management system"]
use_bot=["Firstly, you have to click on STUDENT DETAILS button,fill the information of the student in the opened window and the give the photo sample.Then close the window and click on TRAIN DATA button present in the main window for training the system and make it ready for recognition.Then click on FACE RECOGNITION button for face recognition.If face is recognised then attendance will be marked automatically."]

machine_learning=["what is machine learning?","machine learning","what is used in the project?","what is used in face recognition attendance managemnent system?"]
machine_learning_bot=["In Face Recogition Attendance Management System, Python,Sql and Machine Learning algorthms are used. Machine learning (ML) is a branch of artificial intelligence (AI) and computer science that focuses on the using data and algorithms to enable AI to imitate the way that humans learn, gradually improving its accuracy.Machine learning is data driven technology. Large amount of data generated by organizations on daily bases. So, by notable relationships in data, organizations makes better decisions"]

student_deatails=["student details","what is the purpose of student details?","describe student details","why student details is used?","purpose of student details"]
student_deatails_bot=["STUDENT DETAILS is used for storing the details of the students i.e enrollment number,name,gender,age,etc. and is used for collecting and storing the photo samples of students for face recognition."]

face_recognition=["face recogition","what is the purpose of face recognition?","describe face recognition","purpose of face recognition?","why face recognition is used for?"]
face_recognition_bot=["FACE RECOGNITION is used for detecting and recognising the face of the student and marking their attendance in a csv file.It uses two algorithms i.e. haar cascade algorithm for face detection and LBPH for face recognition."]

attendance=["attendance","what is the purpose of attendance?","describe attendance in face recognition attendance management system","purpose of attendance","why attendance is used for?"]
attendance_bot=["ATTENDANCE is used for importing the csv file, updating them if required and then exporting them into a new file or existing file."]

chatbot_info=["chatbot","what is the purpose of chatbot?","describe face chatbot","purpose of chatbot in face recognition attendance management system?","why chatbot is used for?"]
chatbot_info_bot=["CHATBOT is used for answering the queries of the user regarding the face recognition attendance management system.It is used for desribing the usage of various components such as STUDENT DETAILS,ATTENDANCE,FACE RECOGNITION and so on."]

train_data=["train data","what is the purpose of train data?","describe train data in face recognition attendance management system","purpose of train data","why train data is used for?"]
train_data_bot=["TRAIN DATA is used for training the system for face recognition.It uses the photo samples of the students for face detection and recognition."]

gallery=["gallery","what is the purpose of gallery?","describe gallery in face recognition attendance management system","purpose of gallery","why gallery is used for?"]
gallery_bot=["GALLERY is used for storing and accessing the photo samples of the student."]

developer=["developer","what is the purpose of developer?","describe developer in face recognition attendance management system","purpose of developer","why developer is used for?"]
developer_bot=["DEVELOPER opens up a window which consists of the information of developer Mr. Vishal Srivastava(summary,education,contact details,skills and interests)."]

exit=["what is the purpose of exit?","describe exit in face recognition attendance management system","purpose of exit","why exit is used for?"]
exit_bot=["EXIT button is used for closing the main window."]


class chatbot:
    def __init__(self,root):
        self.root=root
        self.root.geometry("430x600+460+50")
        self.root.title("CHATBOT")
        self.root.resizable(False,False)
        self.root.bind("<Return>",self.enter_function)
        self.root.wm_iconbitmap("52.ico")

        self.entry=StringVar()

        #top label
        label1=Label(self.root,bg="#023047",relief="groove")
        label1.place(x=0,y=0,width=430,height=80)

        #image in top label
        img2=Image.open(r"C:\Users\VAISHNAVI\OneDrive\Desktop\face recognition attendence system\images\47.jpg")
        img2=img2.resize((72,72),Image.ANTIALIAS)
        self.photoimg2=ImageTk.PhotoImage(img2)

        label5=Label(label1,image=self.photoimg2)
        label5.place(x=2,y=2,width=72,height=72)

        #heading in top label
        label6=Label(label1,text="CHATBOT",font=("lucida sans",20,"bold"),fg="white",bg="#023047")
        label6.place(x=120,y=5,width=200,height=40)

        label7=Label(label1,text="ALWAYS READY TO HELP YOU :)",font=("lucida sans",12,"bold"),fg="white",bg="#023047")
        label7.place(x=75,y=40,width=300,height=30)

        #background label
        label2=Label(self.root,bg="#FFB703",relief="groove")
        label2.place(x=0,y=80,width=430,height=520)

        #lower label
        label3=Label(self.root,bg="#219EBC",relief="groove")
        label3.place(x=0,y=520,width=430,height=80)

        #type label and entry field
        label4=Label(label3,text="TYPE HERE",font=("lucida sans",10,"bold"),bg="#fb8500",fg="#252525")
        label4.place(x=5,y=3,height=41,width=81)

        entry1=ttk.Entry(label3,font=("lucida sans",12,"bold"),textvariable=self.entry)
        entry1.place(x=85,y=3,width=300,height=40)

        #send button and clear conversation button
        img1=Image.open(r"C:\Users\VAISHNAVI\OneDrive\Desktop\face recognition attendence system\images\46.png")
        img1=img1.resize((40,40),Image.ANTIALIAS)
        self.photoimg1=ImageTk.PhotoImage(img1)

        b1=Button(label3,image=self.photoimg1,cursor="hand2",relief="groove",command=self.send)
        b1.place(x=385,y=3,width=40,height=40)

        b2=Button(label3,text="CLEAR CONVERSATION",font=("lucida sans",10,"bold"),bg="#252525",fg="White",cursor="hand2",relief="groove",command=self.clear_button)
        b2.place(x=5,y=45,width=420,height=30)

        #scrollbar and text area
        frame1=Frame(label2,bd=2,relief="groove")
        frame1.place(x=10,y=10,width=407,height=395)

        scroll_y=ttk.Scrollbar(frame1,orient="vertical")
        self.text1=Text(frame1,bd=2,relief="groove",font=("lucida sans",10),yscrollcommand=scroll_y.set)
        self.text1.place(x=0,y=0,width=385,height=395)
        scroll_y.pack(side="right",fill="y")
        scroll_y.config(command=self.text1.yview)

        #label for displaying msg
        self.msg=""
        self.label8=Label(self.root,text=self.msg,font=("lucida sans",12,"bold"),bg="#219EBC",fg="white")
        self.label8.place(x=0,y=500,width=430,height=20)

    #function for sending data and clear button
    def enter_function(self,event):
        self.send()
        self.entry.set("")
    def clear_button(self):
        self.text1.delete("1.0",END)
        self.entry.set("")
        self.label8.config(text="",fg="red")

    def send(self):
        send="YOU-:"+self.entry.get()
        self.text1.insert(END,send+"\n")

        if (self.entry.get()==""):
            self.msg="Please enter some input"
            self.label8.config(text=self.msg,fg="red")
        else:
            self.msg=""
            self.label8.config(text=self.msg,fg="red")

        if (self.entry.get() in greeting):
            send="BOT-:"+random.choice(greeting_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in goodbye):
            send="BOT-:"+random.choice(goodbye_bot)
            self.text1.insert(END,send+"\n")
        
        elif(self.entry.get() in age or ("your age" in self.entry.get())):
            send="BOT-:"+random.choice(age_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in name or ("your name" in self.entry.get())):
            send="BOT-:"+random.choice(name_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in description):
            send="BOT-:"+random.choice(description_bot)
            self.text1.insert(END,send+"\n")
        
        elif(self.entry.get() in use or ("works" in self.entry.get())):
            send="BOT-:"+random.choice(use_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in machine_learning):
            send="BOT-:"+random.choice(machine_learning_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in student_deatails or ("student details" in self.entry.get())):
            send="BOT-:"+random.choice(student_deatails_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in face_recognition or ("face recognition" in self.entry.get())):
            send="BOT-:"+random.choice(face_recognition_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in attendance or ("attendance" in self.entry.get())):
            send="BOT-:"+random.choice(attendance_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in chatbot_info or ("chatbot" in self.entry.get())):
            send="BOT-:"+random.choice(chatbot_info_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in train_data or ("train data" in self.entry.get())):
            send="BOT-:"+random.choice(train_data_bot)
            self.text1.insert(END,send+"\n")
        
        elif(self.entry.get() in gallery or ("gallery" in self.entry.get())):
            send="BOT-:"+random.choice(gallery_bot)
            self.text1.insert(END,send+"\n")
        
        elif(self.entry.get() in developer or ("developer" in self.entry.get())):
            send="BOT-:"+random.choice(developer_bot)
            self.text1.insert(END,send+"\n")
        
        elif(self.entry.get() in exit or ("exit" in self.entry.get())):
            send="BOT-:"+random.choice(exit_bot)
            self.text1.insert(END,send+"\n")

        elif(self.entry.get() in thanks ):
            send="BOT-:"+random.choice(thanks_bot)
            self.text1.insert(END,send+"\n")

        else:
            send="BOT-:Sorry,I couldn't get you :("
            self.text1.insert(END,send+"\n")

        self.text1.insert(END,"\n")
        self.text1.yview_moveto(1.0)  # it moves the scrollbar at the bottom for viewing the current text


if __name__=="__main__":
    root=Tk()
    obj=chatbot(root)
    root.mainloop()
